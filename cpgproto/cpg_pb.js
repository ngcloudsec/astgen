// source: cpg.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.cpg.AdditionalEdgeProperty', null, global);
goog.exportSymbol('proto.cpg.AdditionalNodeProperty', null, global);
goog.exportSymbol('proto.cpg.BoolList', null, global);
goog.exportSymbol('proto.cpg.CONTROL_STRUCTURE_TYPES', null, global);
goog.exportSymbol('proto.cpg.ContainedRefs', null, global);
goog.exportSymbol('proto.cpg.CpgOverlay', null, global);
goog.exportSymbol('proto.cpg.CpgStruct', null, global);
goog.exportSymbol('proto.cpg.CpgStruct.Edge', null, global);
goog.exportSymbol('proto.cpg.CpgStruct.Edge.EdgeType', null, global);
goog.exportSymbol('proto.cpg.CpgStruct.Edge.Property', null, global);
goog.exportSymbol('proto.cpg.CpgStruct.Node', null, global);
goog.exportSymbol('proto.cpg.CpgStruct.Node.NodeType', null, global);
goog.exportSymbol('proto.cpg.CpgStruct.Node.Property', null, global);
goog.exportSymbol('proto.cpg.DiffGraph', null, global);
goog.exportSymbol('proto.cpg.DiffGraph.Entry', null, global);
goog.exportSymbol('proto.cpg.DiffGraph.Entry.ValueCase', null, global);
goog.exportSymbol('proto.cpg.DiffGraph.RemoveEdge', null, global);
goog.exportSymbol('proto.cpg.DiffGraph.RemoveEdgeProperty', null, global);
goog.exportSymbol('proto.cpg.DiffGraph.RemoveNode', null, global);
goog.exportSymbol('proto.cpg.DiffGraph.RemoveNodeProperty', null, global);
goog.exportSymbol('proto.cpg.DispatchTypes', null, global);
goog.exportSymbol('proto.cpg.DoubleList', null, global);
goog.exportSymbol('proto.cpg.EdgePropertyName', null, global);
goog.exportSymbol('proto.cpg.EvaluationStrategies', null, global);
goog.exportSymbol('proto.cpg.FRAMEWORKS', null, global);
goog.exportSymbol('proto.cpg.FloatList', null, global);
goog.exportSymbol('proto.cpg.IntList', null, global);
goog.exportSymbol('proto.cpg.LANGUAGES', null, global);
goog.exportSymbol('proto.cpg.LongList', null, global);
goog.exportSymbol('proto.cpg.ModifierTypes', null, global);
goog.exportSymbol('proto.cpg.NodePropertyName', null, global);
goog.exportSymbol('proto.cpg.PropertyValue', null, global);
goog.exportSymbol('proto.cpg.PropertyValue.ValueCase', null, global);
goog.exportSymbol('proto.cpg.StringList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.PropertyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cpg.PropertyValue.oneofGroups_);
};
goog.inherits(proto.cpg.PropertyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.PropertyValue.displayName = 'proto.cpg.PropertyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.ContainedRefs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.ContainedRefs.repeatedFields_, null);
};
goog.inherits(proto.cpg.ContainedRefs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.ContainedRefs.displayName = 'proto.cpg.ContainedRefs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.StringList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.StringList.repeatedFields_, null);
};
goog.inherits(proto.cpg.StringList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.StringList.displayName = 'proto.cpg.StringList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.BoolList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.BoolList.repeatedFields_, null);
};
goog.inherits(proto.cpg.BoolList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.BoolList.displayName = 'proto.cpg.BoolList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.IntList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.IntList.repeatedFields_, null);
};
goog.inherits(proto.cpg.IntList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.IntList.displayName = 'proto.cpg.IntList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.LongList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.LongList.repeatedFields_, null);
};
goog.inherits(proto.cpg.LongList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.LongList.displayName = 'proto.cpg.LongList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.FloatList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.FloatList.repeatedFields_, null);
};
goog.inherits(proto.cpg.FloatList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.FloatList.displayName = 'proto.cpg.FloatList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DoubleList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.DoubleList.repeatedFields_, null);
};
goog.inherits(proto.cpg.DoubleList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DoubleList.displayName = 'proto.cpg.DoubleList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.CpgStruct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.CpgStruct.repeatedFields_, null);
};
goog.inherits(proto.cpg.CpgStruct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.CpgStruct.displayName = 'proto.cpg.CpgStruct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.CpgStruct.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.CpgStruct.Node.repeatedFields_, null);
};
goog.inherits(proto.cpg.CpgStruct.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.CpgStruct.Node.displayName = 'proto.cpg.CpgStruct.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.CpgStruct.Node.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.CpgStruct.Node.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.CpgStruct.Node.Property.displayName = 'proto.cpg.CpgStruct.Node.Property';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.CpgStruct.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.CpgStruct.Edge.repeatedFields_, null);
};
goog.inherits(proto.cpg.CpgStruct.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.CpgStruct.Edge.displayName = 'proto.cpg.CpgStruct.Edge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.CpgStruct.Edge.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.CpgStruct.Edge.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.CpgStruct.Edge.Property.displayName = 'proto.cpg.CpgStruct.Edge.Property';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.AdditionalNodeProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.AdditionalNodeProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.AdditionalNodeProperty.displayName = 'proto.cpg.AdditionalNodeProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.AdditionalEdgeProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.AdditionalEdgeProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.AdditionalEdgeProperty.displayName = 'proto.cpg.AdditionalEdgeProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.CpgOverlay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.CpgOverlay.repeatedFields_, null);
};
goog.inherits(proto.cpg.CpgOverlay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.CpgOverlay.displayName = 'proto.cpg.CpgOverlay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.DiffGraph.repeatedFields_, null);
};
goog.inherits(proto.cpg.DiffGraph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.displayName = 'proto.cpg.DiffGraph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph.RemoveNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.DiffGraph.RemoveNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.RemoveNode.displayName = 'proto.cpg.DiffGraph.RemoveNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph.RemoveNodeProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.DiffGraph.RemoveNodeProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.RemoveNodeProperty.displayName = 'proto.cpg.DiffGraph.RemoveNodeProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph.RemoveEdge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.DiffGraph.RemoveEdge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.RemoveEdge.displayName = 'proto.cpg.DiffGraph.RemoveEdge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph.RemoveEdgeProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.DiffGraph.RemoveEdgeProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.RemoveEdgeProperty.displayName = 'proto.cpg.DiffGraph.RemoveEdgeProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph.Entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cpg.DiffGraph.Entry.oneofGroups_);
};
goog.inherits(proto.cpg.DiffGraph.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.Entry.displayName = 'proto.cpg.DiffGraph.Entry';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cpg.PropertyValue.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.cpg.PropertyValue.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 1,
  BOOL_VALUE: 2,
  INT_VALUE: 3,
  LONG_VALUE: 4,
  FLOAT_VALUE: 5,
  DOUBLE_VALUE: 6,
  STRING_LIST: 7,
  BOOL_LIST: 8,
  INT_LIST: 9,
  LONG_LIST: 10,
  FLOAT_LIST: 11,
  DOUBLE_LIST: 12,
  CONTAINED_REFS: 13
};

/**
 * @return {proto.cpg.PropertyValue.ValueCase}
 */
proto.cpg.PropertyValue.prototype.getValueCase = function() {
  return /** @type {proto.cpg.PropertyValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.cpg.PropertyValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.PropertyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.PropertyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.PropertyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.PropertyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringValue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    intValue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    longValue: jspb.Message.getFieldWithDefault(msg, 4, 0),
    floatValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    doubleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    stringList: (f = msg.getStringList()) && proto.cpg.StringList.toObject(includeInstance, f),
    boolList: (f = msg.getBoolList()) && proto.cpg.BoolList.toObject(includeInstance, f),
    intList: (f = msg.getIntList()) && proto.cpg.IntList.toObject(includeInstance, f),
    longList: (f = msg.getLongList()) && proto.cpg.LongList.toObject(includeInstance, f),
    floatList: (f = msg.getFloatList()) && proto.cpg.FloatList.toObject(includeInstance, f),
    doubleList: (f = msg.getDoubleList()) && proto.cpg.DoubleList.toObject(includeInstance, f),
    containedRefs: (f = msg.getContainedRefs()) && proto.cpg.ContainedRefs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.PropertyValue}
 */
proto.cpg.PropertyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.PropertyValue;
  return proto.cpg.PropertyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.PropertyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.PropertyValue}
 */
proto.cpg.PropertyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLongValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 7:
      var value = new proto.cpg.StringList;
      reader.readMessage(value,proto.cpg.StringList.deserializeBinaryFromReader);
      msg.setStringList(value);
      break;
    case 8:
      var value = new proto.cpg.BoolList;
      reader.readMessage(value,proto.cpg.BoolList.deserializeBinaryFromReader);
      msg.setBoolList(value);
      break;
    case 9:
      var value = new proto.cpg.IntList;
      reader.readMessage(value,proto.cpg.IntList.deserializeBinaryFromReader);
      msg.setIntList(value);
      break;
    case 10:
      var value = new proto.cpg.LongList;
      reader.readMessage(value,proto.cpg.LongList.deserializeBinaryFromReader);
      msg.setLongList(value);
      break;
    case 11:
      var value = new proto.cpg.FloatList;
      reader.readMessage(value,proto.cpg.FloatList.deserializeBinaryFromReader);
      msg.setFloatList(value);
      break;
    case 12:
      var value = new proto.cpg.DoubleList;
      reader.readMessage(value,proto.cpg.DoubleList.deserializeBinaryFromReader);
      msg.setDoubleList(value);
      break;
    case 13:
      var value = new proto.cpg.ContainedRefs;
      reader.readMessage(value,proto.cpg.ContainedRefs.deserializeBinaryFromReader);
      msg.setContainedRefs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.PropertyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.PropertyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.PropertyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.PropertyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getStringList();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.cpg.StringList.serializeBinaryToWriter
    );
  }
  f = message.getBoolList();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.cpg.BoolList.serializeBinaryToWriter
    );
  }
  f = message.getIntList();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.cpg.IntList.serializeBinaryToWriter
    );
  }
  f = message.getLongList();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.cpg.LongList.serializeBinaryToWriter
    );
  }
  f = message.getFloatList();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.cpg.FloatList.serializeBinaryToWriter
    );
  }
  f = message.getDoubleList();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.cpg.DoubleList.serializeBinaryToWriter
    );
  }
  f = message.getContainedRefs();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.cpg.ContainedRefs.serializeBinaryToWriter
    );
  }
};


/**
 * optional string string_value = 1;
 * @return {string}
 */
proto.cpg.PropertyValue.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.cpg.PropertyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bool_value = 2;
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.cpg.PropertyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 int_value = 3;
 * @return {number}
 */
proto.cpg.PropertyValue.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.cpg.PropertyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 long_value = 4;
 * @return {number}
 */
proto.cpg.PropertyValue.prototype.getLongValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.setLongValue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearLongValue = function() {
  return jspb.Message.setOneofField(this, 4, proto.cpg.PropertyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasLongValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float float_value = 5;
 * @return {number}
 */
proto.cpg.PropertyValue.prototype.getFloatValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.setFloatValue = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearFloatValue = function() {
  return jspb.Message.setOneofField(this, 5, proto.cpg.PropertyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasFloatValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double double_value = 6;
 * @return {number}
 */
proto.cpg.PropertyValue.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.setDoubleValue = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearDoubleValue = function() {
  return jspb.Message.setOneofField(this, 6, proto.cpg.PropertyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional StringList string_list = 7;
 * @return {?proto.cpg.StringList}
 */
proto.cpg.PropertyValue.prototype.getStringList = function() {
  return /** @type{?proto.cpg.StringList} */ (
    jspb.Message.getWrapperField(this, proto.cpg.StringList, 7));
};


/**
 * @param {?proto.cpg.StringList|undefined} value
 * @return {!proto.cpg.PropertyValue} returns this
*/
proto.cpg.PropertyValue.prototype.setStringList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearStringList = function() {
  return this.setStringList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasStringList = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BoolList bool_list = 8;
 * @return {?proto.cpg.BoolList}
 */
proto.cpg.PropertyValue.prototype.getBoolList = function() {
  return /** @type{?proto.cpg.BoolList} */ (
    jspb.Message.getWrapperField(this, proto.cpg.BoolList, 8));
};


/**
 * @param {?proto.cpg.BoolList|undefined} value
 * @return {!proto.cpg.PropertyValue} returns this
*/
proto.cpg.PropertyValue.prototype.setBoolList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearBoolList = function() {
  return this.setBoolList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasBoolList = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional IntList int_list = 9;
 * @return {?proto.cpg.IntList}
 */
proto.cpg.PropertyValue.prototype.getIntList = function() {
  return /** @type{?proto.cpg.IntList} */ (
    jspb.Message.getWrapperField(this, proto.cpg.IntList, 9));
};


/**
 * @param {?proto.cpg.IntList|undefined} value
 * @return {!proto.cpg.PropertyValue} returns this
*/
proto.cpg.PropertyValue.prototype.setIntList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearIntList = function() {
  return this.setIntList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasIntList = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional LongList long_list = 10;
 * @return {?proto.cpg.LongList}
 */
proto.cpg.PropertyValue.prototype.getLongList = function() {
  return /** @type{?proto.cpg.LongList} */ (
    jspb.Message.getWrapperField(this, proto.cpg.LongList, 10));
};


/**
 * @param {?proto.cpg.LongList|undefined} value
 * @return {!proto.cpg.PropertyValue} returns this
*/
proto.cpg.PropertyValue.prototype.setLongList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearLongList = function() {
  return this.setLongList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasLongList = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional FloatList float_list = 11;
 * @return {?proto.cpg.FloatList}
 */
proto.cpg.PropertyValue.prototype.getFloatList = function() {
  return /** @type{?proto.cpg.FloatList} */ (
    jspb.Message.getWrapperField(this, proto.cpg.FloatList, 11));
};


/**
 * @param {?proto.cpg.FloatList|undefined} value
 * @return {!proto.cpg.PropertyValue} returns this
*/
proto.cpg.PropertyValue.prototype.setFloatList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearFloatList = function() {
  return this.setFloatList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasFloatList = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional DoubleList double_list = 12;
 * @return {?proto.cpg.DoubleList}
 */
proto.cpg.PropertyValue.prototype.getDoubleList = function() {
  return /** @type{?proto.cpg.DoubleList} */ (
    jspb.Message.getWrapperField(this, proto.cpg.DoubleList, 12));
};


/**
 * @param {?proto.cpg.DoubleList|undefined} value
 * @return {!proto.cpg.PropertyValue} returns this
*/
proto.cpg.PropertyValue.prototype.setDoubleList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearDoubleList = function() {
  return this.setDoubleList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasDoubleList = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ContainedRefs contained_refs = 13;
 * @return {?proto.cpg.ContainedRefs}
 */
proto.cpg.PropertyValue.prototype.getContainedRefs = function() {
  return /** @type{?proto.cpg.ContainedRefs} */ (
    jspb.Message.getWrapperField(this, proto.cpg.ContainedRefs, 13));
};


/**
 * @param {?proto.cpg.ContainedRefs|undefined} value
 * @return {!proto.cpg.PropertyValue} returns this
*/
proto.cpg.PropertyValue.prototype.setContainedRefs = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.cpg.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.PropertyValue} returns this
 */
proto.cpg.PropertyValue.prototype.clearContainedRefs = function() {
  return this.setContainedRefs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.PropertyValue.prototype.hasContainedRefs = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.ContainedRefs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.ContainedRefs.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.ContainedRefs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.ContainedRefs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.ContainedRefs.toObject = function(includeInstance, msg) {
  var f, obj = {
    localName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    refsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.ContainedRefs}
 */
proto.cpg.ContainedRefs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.ContainedRefs;
  return proto.cpg.ContainedRefs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.ContainedRefs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.ContainedRefs}
 */
proto.cpg.ContainedRefs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalName(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRefs(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.ContainedRefs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.ContainedRefs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.ContainedRefs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.ContainedRefs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRefsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
};


/**
 * optional string local_name = 1;
 * @return {string}
 */
proto.cpg.ContainedRefs.prototype.getLocalName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpg.ContainedRefs} returns this
 */
proto.cpg.ContainedRefs.prototype.setLocalName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int64 refs = 2;
 * @return {!Array<number>}
 */
proto.cpg.ContainedRefs.prototype.getRefsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.cpg.ContainedRefs} returns this
 */
proto.cpg.ContainedRefs.prototype.setRefsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.cpg.ContainedRefs} returns this
 */
proto.cpg.ContainedRefs.prototype.addRefs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.ContainedRefs} returns this
 */
proto.cpg.ContainedRefs.prototype.clearRefsList = function() {
  return this.setRefsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.StringList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.StringList.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.StringList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.StringList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.StringList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.StringList}
 */
proto.cpg.StringList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.StringList;
  return proto.cpg.StringList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.StringList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.StringList}
 */
proto.cpg.StringList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.StringList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.StringList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.StringList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.StringList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.cpg.StringList.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cpg.StringList} returns this
 */
proto.cpg.StringList.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cpg.StringList} returns this
 */
proto.cpg.StringList.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.StringList} returns this
 */
proto.cpg.StringList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.BoolList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.BoolList.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.BoolList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.BoolList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.BoolList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.BoolList}
 */
proto.cpg.BoolList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.BoolList;
  return proto.cpg.BoolList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.BoolList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.BoolList}
 */
proto.cpg.BoolList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.BoolList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.BoolList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.BoolList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.BoolList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedBool(
      1,
      f
    );
  }
};


/**
 * repeated bool values = 1;
 * @return {!Array<boolean>}
 */
proto.cpg.BoolList.prototype.getValuesList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 1));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.cpg.BoolList} returns this
 */
proto.cpg.BoolList.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.cpg.BoolList} returns this
 */
proto.cpg.BoolList.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.BoolList} returns this
 */
proto.cpg.BoolList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.IntList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.IntList.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.IntList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.IntList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.IntList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.IntList}
 */
proto.cpg.IntList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.IntList;
  return proto.cpg.IntList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.IntList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.IntList}
 */
proto.cpg.IntList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.IntList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.IntList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.IntList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.IntList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 values = 1;
 * @return {!Array<number>}
 */
proto.cpg.IntList.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.cpg.IntList} returns this
 */
proto.cpg.IntList.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.cpg.IntList} returns this
 */
proto.cpg.IntList.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.IntList} returns this
 */
proto.cpg.IntList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.LongList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.LongList.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.LongList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.LongList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.LongList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.LongList}
 */
proto.cpg.LongList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.LongList;
  return proto.cpg.LongList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.LongList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.LongList}
 */
proto.cpg.LongList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.LongList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.LongList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.LongList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.LongList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 values = 1;
 * @return {!Array<number>}
 */
proto.cpg.LongList.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.cpg.LongList} returns this
 */
proto.cpg.LongList.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.cpg.LongList} returns this
 */
proto.cpg.LongList.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.LongList} returns this
 */
proto.cpg.LongList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.FloatList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.FloatList.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.FloatList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.FloatList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.FloatList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.FloatList}
 */
proto.cpg.FloatList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.FloatList;
  return proto.cpg.FloatList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.FloatList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.FloatList}
 */
proto.cpg.FloatList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.FloatList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.FloatList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.FloatList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.FloatList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float values = 1;
 * @return {!Array<number>}
 */
proto.cpg.FloatList.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.cpg.FloatList} returns this
 */
proto.cpg.FloatList.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.cpg.FloatList} returns this
 */
proto.cpg.FloatList.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.FloatList} returns this
 */
proto.cpg.FloatList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.DoubleList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DoubleList.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DoubleList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DoubleList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DoubleList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DoubleList}
 */
proto.cpg.DoubleList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DoubleList;
  return proto.cpg.DoubleList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DoubleList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DoubleList}
 */
proto.cpg.DoubleList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DoubleList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DoubleList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DoubleList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DoubleList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double values = 1;
 * @return {!Array<number>}
 */
proto.cpg.DoubleList.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.cpg.DoubleList} returns this
 */
proto.cpg.DoubleList.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.cpg.DoubleList} returns this
 */
proto.cpg.DoubleList.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.DoubleList} returns this
 */
proto.cpg.DoubleList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.CpgStruct.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.CpgStruct.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.CpgStruct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.CpgStruct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgStruct.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeList: jspb.Message.toObjectList(msg.getNodeList(),
    proto.cpg.CpgStruct.Node.toObject, includeInstance),
    edgeList: jspb.Message.toObjectList(msg.getEdgeList(),
    proto.cpg.CpgStruct.Edge.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.CpgStruct}
 */
proto.cpg.CpgStruct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.CpgStruct;
  return proto.cpg.CpgStruct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.CpgStruct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.CpgStruct}
 */
proto.cpg.CpgStruct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cpg.CpgStruct.Node;
      reader.readMessage(value,proto.cpg.CpgStruct.Node.deserializeBinaryFromReader);
      msg.addNode(value);
      break;
    case 2:
      var value = new proto.cpg.CpgStruct.Edge;
      reader.readMessage(value,proto.cpg.CpgStruct.Edge.deserializeBinaryFromReader);
      msg.addEdge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.CpgStruct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.CpgStruct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.CpgStruct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgStruct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cpg.CpgStruct.Node.serializeBinaryToWriter
    );
  }
  f = message.getEdgeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cpg.CpgStruct.Edge.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.CpgStruct.Node.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.CpgStruct.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.CpgStruct.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.CpgStruct.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgStruct.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    propertyList: jspb.Message.toObjectList(msg.getPropertyList(),
    proto.cpg.CpgStruct.Node.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.CpgStruct.Node}
 */
proto.cpg.CpgStruct.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.CpgStruct.Node;
  return proto.cpg.CpgStruct.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.CpgStruct.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.CpgStruct.Node}
 */
proto.cpg.CpgStruct.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.cpg.CpgStruct.Node.NodeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.cpg.CpgStruct.Node.Property;
      reader.readMessage(value,proto.cpg.CpgStruct.Node.Property.deserializeBinaryFromReader);
      msg.addProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.CpgStruct.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.CpgStruct.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.CpgStruct.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgStruct.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPropertyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cpg.CpgStruct.Node.Property.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cpg.CpgStruct.Node.NodeType = {
  UNKNOWN_NODE_TYPE: 0,
  METHOD: 1,
  METHOD_RETURN: 3,
  ANNOTATION: 5,
  ANNOTATION_PARAMETER_ASSIGN: 6,
  ANNOTATION_PARAMETER: 7,
  LITERAL: 8,
  MEMBER: 9,
  ARRAY_INITIALIZER: 14,
  CALL: 15,
  LOCAL: 23,
  TAG: 24,
  LOCATION: 25,
  IDENTIFIER: 27,
  RETURN: 30,
  BLOCK: 31,
  METHOD_INST: 32,
  METHOD_PARAMETER_OUT: 33,
  METHOD_PARAMETER_IN: 34,
  DEPENDENCY: 35,
  PACKAGE_PREFIX: 36,
  FILE: 38,
  META_DATA: 39,
  NAMESPACE: 40,
  NAMESPACE_BLOCK: 41,
  FRAMEWORK: 42,
  FRAMEWORK_DATA: 43,
  UNKNOWN: 44,
  TYPE: 45,
  TYPE_DECL: 46,
  TYPE_PARAMETER: 47,
  TYPE_ARGUMENT: 48,
  ANNOTATION_LITERAL: 49,
  CONFIG_FILE: 50,
  MATCH_INFO: 51,
  SENSITIVE_DATA_TYPE: 52,
  SENSITIVE_MEMBER: 53,
  SENSITIVE_VARIABLE: 54,
  SENSITIVE_REFERENCE: 55,
  BINDING: 146,
  METHOD_SUMMARY: 199,
  SP_ANNOTATION_PARAMETER: 200,
  CALL_SITE: 201,
  SOURCE: 202,
  SINK: 203,
  CALL_CHAIN: 204,
  PROGRAM_POINT: 205,
  VARIABLE_INFO: 206,
  FLOW: 207,
  TAG_NODE_PAIR: 208,
  READ: 209,
  WRITE: 210,
  TRANSFORM: 211,
  IOFLOW: 212,
  TRANSFORMATION: 213,
  FINDING: 214,
  ROUTE: 215,
  SP_BLACKLIST: 216,
  KEY_VALUE_PAIR: 217,
  MODIFIER: 300,
  TAGS: 301,
  IMPLICIT_CALL: 307,
  METHOD_REF: 333,
  CLOSURE_BINDING: 334,
  TYPE_REF: 335,
  CONTROL_STRUCTURE: 339,
  JUMP_TARGET: 340,
  JUMP_LABEL: 341,
  COMMENT: 511,
  DOM_NODE: 600,
  DOM_ATTRIBUTE: 601,
  POST_EXECUTION_CALL: 3071,
  FIELD_IDENTIFIER: 2001081
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.CpgStruct.Node.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.CpgStruct.Node.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.CpgStruct.Node.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgStruct.Node.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: (f = msg.getValue()) && proto.cpg.PropertyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.CpgStruct.Node.Property}
 */
proto.cpg.CpgStruct.Node.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.CpgStruct.Node.Property;
  return proto.cpg.CpgStruct.Node.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.CpgStruct.Node.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.CpgStruct.Node.Property}
 */
proto.cpg.CpgStruct.Node.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cpg.NodePropertyName} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.cpg.PropertyValue;
      reader.readMessage(value,proto.cpg.PropertyValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.CpgStruct.Node.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.CpgStruct.Node.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.CpgStruct.Node.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgStruct.Node.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cpg.PropertyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodePropertyName name = 1;
 * @return {!proto.cpg.NodePropertyName}
 */
proto.cpg.CpgStruct.Node.Property.prototype.getName = function() {
  return /** @type {!proto.cpg.NodePropertyName} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cpg.NodePropertyName} value
 * @return {!proto.cpg.CpgStruct.Node.Property} returns this
 */
proto.cpg.CpgStruct.Node.Property.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PropertyValue value = 2;
 * @return {?proto.cpg.PropertyValue}
 */
proto.cpg.CpgStruct.Node.Property.prototype.getValue = function() {
  return /** @type{?proto.cpg.PropertyValue} */ (
    jspb.Message.getWrapperField(this, proto.cpg.PropertyValue, 2));
};


/**
 * @param {?proto.cpg.PropertyValue|undefined} value
 * @return {!proto.cpg.CpgStruct.Node.Property} returns this
*/
proto.cpg.CpgStruct.Node.Property.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.CpgStruct.Node.Property} returns this
 */
proto.cpg.CpgStruct.Node.Property.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.CpgStruct.Node.Property.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 key = 1;
 * @return {number}
 */
proto.cpg.CpgStruct.Node.prototype.getKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.CpgStruct.Node} returns this
 */
proto.cpg.CpgStruct.Node.prototype.setKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional NodeType type = 2;
 * @return {!proto.cpg.CpgStruct.Node.NodeType}
 */
proto.cpg.CpgStruct.Node.prototype.getType = function() {
  return /** @type {!proto.cpg.CpgStruct.Node.NodeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cpg.CpgStruct.Node.NodeType} value
 * @return {!proto.cpg.CpgStruct.Node} returns this
 */
proto.cpg.CpgStruct.Node.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated Property property = 3;
 * @return {!Array<!proto.cpg.CpgStruct.Node.Property>}
 */
proto.cpg.CpgStruct.Node.prototype.getPropertyList = function() {
  return /** @type{!Array<!proto.cpg.CpgStruct.Node.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpg.CpgStruct.Node.Property, 3));
};


/**
 * @param {!Array<!proto.cpg.CpgStruct.Node.Property>} value
 * @return {!proto.cpg.CpgStruct.Node} returns this
*/
proto.cpg.CpgStruct.Node.prototype.setPropertyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cpg.CpgStruct.Node.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpg.CpgStruct.Node.Property}
 */
proto.cpg.CpgStruct.Node.prototype.addProperty = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cpg.CpgStruct.Node.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.CpgStruct.Node} returns this
 */
proto.cpg.CpgStruct.Node.prototype.clearPropertyList = function() {
  return this.setPropertyList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.CpgStruct.Edge.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.CpgStruct.Edge.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.CpgStruct.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.CpgStruct.Edge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgStruct.Edge.toObject = function(includeInstance, msg) {
  var f, obj = {
    src: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dst: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    propertyList: jspb.Message.toObjectList(msg.getPropertyList(),
    proto.cpg.CpgStruct.Edge.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.CpgStruct.Edge}
 */
proto.cpg.CpgStruct.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.CpgStruct.Edge;
  return proto.cpg.CpgStruct.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.CpgStruct.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.CpgStruct.Edge}
 */
proto.cpg.CpgStruct.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSrc(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDst(value);
      break;
    case 3:
      var value = /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.cpg.CpgStruct.Edge.Property;
      reader.readMessage(value,proto.cpg.CpgStruct.Edge.Property.deserializeBinaryFromReader);
      msg.addProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.CpgStruct.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.CpgStruct.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.CpgStruct.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgStruct.Edge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrc();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDst();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPropertyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.cpg.CpgStruct.Edge.Property.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cpg.CpgStruct.Edge.EdgeType = {
  UNKNOWN_EDGE_TYPE: 0,
  AST: 3,
  CALL: 6,
  CONTAINS_NODE: 9,
  REF: 10,
  TAGGED_BY: 11,
  PARAMETER_LINK: 12,
  TAINT_REMOVE: 17,
  ATTACHED_DATA: 18,
  CFG: 19,
  DYNAMIC_TYPE: 20,
  EVAL_TYPE: 21,
  BINDS_TO: 22,
  INHERITS_FROM: 23,
  CONTAINS: 28,
  VTABLE: 30,
  CAPTURE: 40,
  CAPTURED_BY: 41,
  RECEIVER: 55,
  CONDITION: 56,
  REACHING_DEF: 137,
  ALIAS_OF: 138,
  TYPE_DECL_ALIAS: 139,
  BINDS: 155,
  ARGUMENT: 156,
  SOURCE_FILE: 157,
  DOMINATE: 181,
  POST_DOMINATE: 182,
  CDG: 183,
  IS_SENSITIVE_DATA_DESCR_OF: 900,
  IS_SENSITIVE_DATA_DESCR_OF_REF: 901,
  IS_SENSITIVE_DATA_OF_TYPE: 902
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.CpgStruct.Edge.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.CpgStruct.Edge.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.CpgStruct.Edge.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgStruct.Edge.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: (f = msg.getValue()) && proto.cpg.PropertyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.CpgStruct.Edge.Property}
 */
proto.cpg.CpgStruct.Edge.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.CpgStruct.Edge.Property;
  return proto.cpg.CpgStruct.Edge.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.CpgStruct.Edge.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.CpgStruct.Edge.Property}
 */
proto.cpg.CpgStruct.Edge.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cpg.EdgePropertyName} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.cpg.PropertyValue;
      reader.readMessage(value,proto.cpg.PropertyValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.CpgStruct.Edge.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.CpgStruct.Edge.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.CpgStruct.Edge.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgStruct.Edge.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cpg.PropertyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional EdgePropertyName name = 1;
 * @return {!proto.cpg.EdgePropertyName}
 */
proto.cpg.CpgStruct.Edge.Property.prototype.getName = function() {
  return /** @type {!proto.cpg.EdgePropertyName} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cpg.EdgePropertyName} value
 * @return {!proto.cpg.CpgStruct.Edge.Property} returns this
 */
proto.cpg.CpgStruct.Edge.Property.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PropertyValue value = 2;
 * @return {?proto.cpg.PropertyValue}
 */
proto.cpg.CpgStruct.Edge.Property.prototype.getValue = function() {
  return /** @type{?proto.cpg.PropertyValue} */ (
    jspb.Message.getWrapperField(this, proto.cpg.PropertyValue, 2));
};


/**
 * @param {?proto.cpg.PropertyValue|undefined} value
 * @return {!proto.cpg.CpgStruct.Edge.Property} returns this
*/
proto.cpg.CpgStruct.Edge.Property.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.CpgStruct.Edge.Property} returns this
 */
proto.cpg.CpgStruct.Edge.Property.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.CpgStruct.Edge.Property.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 src = 1;
 * @return {number}
 */
proto.cpg.CpgStruct.Edge.prototype.getSrc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.CpgStruct.Edge} returns this
 */
proto.cpg.CpgStruct.Edge.prototype.setSrc = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 dst = 2;
 * @return {number}
 */
proto.cpg.CpgStruct.Edge.prototype.getDst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.CpgStruct.Edge} returns this
 */
proto.cpg.CpgStruct.Edge.prototype.setDst = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional EdgeType type = 3;
 * @return {!proto.cpg.CpgStruct.Edge.EdgeType}
 */
proto.cpg.CpgStruct.Edge.prototype.getType = function() {
  return /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.cpg.CpgStruct.Edge.EdgeType} value
 * @return {!proto.cpg.CpgStruct.Edge} returns this
 */
proto.cpg.CpgStruct.Edge.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Property property = 4;
 * @return {!Array<!proto.cpg.CpgStruct.Edge.Property>}
 */
proto.cpg.CpgStruct.Edge.prototype.getPropertyList = function() {
  return /** @type{!Array<!proto.cpg.CpgStruct.Edge.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpg.CpgStruct.Edge.Property, 4));
};


/**
 * @param {!Array<!proto.cpg.CpgStruct.Edge.Property>} value
 * @return {!proto.cpg.CpgStruct.Edge} returns this
*/
proto.cpg.CpgStruct.Edge.prototype.setPropertyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cpg.CpgStruct.Edge.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpg.CpgStruct.Edge.Property}
 */
proto.cpg.CpgStruct.Edge.prototype.addProperty = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cpg.CpgStruct.Edge.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.CpgStruct.Edge} returns this
 */
proto.cpg.CpgStruct.Edge.prototype.clearPropertyList = function() {
  return this.setPropertyList([]);
};


/**
 * repeated Node node = 1;
 * @return {!Array<!proto.cpg.CpgStruct.Node>}
 */
proto.cpg.CpgStruct.prototype.getNodeList = function() {
  return /** @type{!Array<!proto.cpg.CpgStruct.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpg.CpgStruct.Node, 1));
};


/**
 * @param {!Array<!proto.cpg.CpgStruct.Node>} value
 * @return {!proto.cpg.CpgStruct} returns this
*/
proto.cpg.CpgStruct.prototype.setNodeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cpg.CpgStruct.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpg.CpgStruct.Node}
 */
proto.cpg.CpgStruct.prototype.addNode = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cpg.CpgStruct.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.CpgStruct} returns this
 */
proto.cpg.CpgStruct.prototype.clearNodeList = function() {
  return this.setNodeList([]);
};


/**
 * repeated Edge edge = 2;
 * @return {!Array<!proto.cpg.CpgStruct.Edge>}
 */
proto.cpg.CpgStruct.prototype.getEdgeList = function() {
  return /** @type{!Array<!proto.cpg.CpgStruct.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpg.CpgStruct.Edge, 2));
};


/**
 * @param {!Array<!proto.cpg.CpgStruct.Edge>} value
 * @return {!proto.cpg.CpgStruct} returns this
*/
proto.cpg.CpgStruct.prototype.setEdgeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cpg.CpgStruct.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpg.CpgStruct.Edge}
 */
proto.cpg.CpgStruct.prototype.addEdge = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cpg.CpgStruct.Edge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.CpgStruct} returns this
 */
proto.cpg.CpgStruct.prototype.clearEdgeList = function() {
  return this.setEdgeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.AdditionalNodeProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.AdditionalNodeProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.AdditionalNodeProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.AdditionalNodeProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    property: (f = msg.getProperty()) && proto.cpg.CpgStruct.Node.Property.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.AdditionalNodeProperty}
 */
proto.cpg.AdditionalNodeProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.AdditionalNodeProperty;
  return proto.cpg.AdditionalNodeProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.AdditionalNodeProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.AdditionalNodeProperty}
 */
proto.cpg.AdditionalNodeProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNodeId(value);
      break;
    case 2:
      var value = new proto.cpg.CpgStruct.Node.Property;
      reader.readMessage(value,proto.cpg.CpgStruct.Node.Property.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.AdditionalNodeProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.AdditionalNodeProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.AdditionalNodeProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.AdditionalNodeProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cpg.CpgStruct.Node.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 node_id = 1;
 * @return {number}
 */
proto.cpg.AdditionalNodeProperty.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.AdditionalNodeProperty} returns this
 */
proto.cpg.AdditionalNodeProperty.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CpgStruct.Node.Property property = 2;
 * @return {?proto.cpg.CpgStruct.Node.Property}
 */
proto.cpg.AdditionalNodeProperty.prototype.getProperty = function() {
  return /** @type{?proto.cpg.CpgStruct.Node.Property} */ (
    jspb.Message.getWrapperField(this, proto.cpg.CpgStruct.Node.Property, 2));
};


/**
 * @param {?proto.cpg.CpgStruct.Node.Property|undefined} value
 * @return {!proto.cpg.AdditionalNodeProperty} returns this
*/
proto.cpg.AdditionalNodeProperty.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.AdditionalNodeProperty} returns this
 */
proto.cpg.AdditionalNodeProperty.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.AdditionalNodeProperty.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.AdditionalEdgeProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.AdditionalEdgeProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.AdditionalEdgeProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.AdditionalEdgeProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    edgeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    property: (f = msg.getProperty()) && proto.cpg.CpgStruct.Edge.Property.toObject(includeInstance, f),
    outNodeKey: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inNodeKey: jspb.Message.getFieldWithDefault(msg, 4, 0),
    edgeType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.AdditionalEdgeProperty}
 */
proto.cpg.AdditionalEdgeProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.AdditionalEdgeProperty;
  return proto.cpg.AdditionalEdgeProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.AdditionalEdgeProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.AdditionalEdgeProperty}
 */
proto.cpg.AdditionalEdgeProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEdgeId(value);
      break;
    case 2:
      var value = new proto.cpg.CpgStruct.Edge.Property;
      reader.readMessage(value,proto.cpg.CpgStruct.Edge.Property.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOutNodeKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInNodeKey(value);
      break;
    case 5:
      var value = /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (reader.readEnum());
      msg.setEdgeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.AdditionalEdgeProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.AdditionalEdgeProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.AdditionalEdgeProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.AdditionalEdgeProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEdgeId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cpg.CpgStruct.Edge.Property.serializeBinaryToWriter
    );
  }
  f = message.getOutNodeKey();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getInNodeKey();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getEdgeType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int64 edge_id = 1;
 * @return {number}
 */
proto.cpg.AdditionalEdgeProperty.prototype.getEdgeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.AdditionalEdgeProperty} returns this
 */
proto.cpg.AdditionalEdgeProperty.prototype.setEdgeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CpgStruct.Edge.Property property = 2;
 * @return {?proto.cpg.CpgStruct.Edge.Property}
 */
proto.cpg.AdditionalEdgeProperty.prototype.getProperty = function() {
  return /** @type{?proto.cpg.CpgStruct.Edge.Property} */ (
    jspb.Message.getWrapperField(this, proto.cpg.CpgStruct.Edge.Property, 2));
};


/**
 * @param {?proto.cpg.CpgStruct.Edge.Property|undefined} value
 * @return {!proto.cpg.AdditionalEdgeProperty} returns this
*/
proto.cpg.AdditionalEdgeProperty.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.AdditionalEdgeProperty} returns this
 */
proto.cpg.AdditionalEdgeProperty.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.AdditionalEdgeProperty.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 out_node_key = 3;
 * @return {number}
 */
proto.cpg.AdditionalEdgeProperty.prototype.getOutNodeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.AdditionalEdgeProperty} returns this
 */
proto.cpg.AdditionalEdgeProperty.prototype.setOutNodeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 in_node_key = 4;
 * @return {number}
 */
proto.cpg.AdditionalEdgeProperty.prototype.getInNodeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.AdditionalEdgeProperty} returns this
 */
proto.cpg.AdditionalEdgeProperty.prototype.setInNodeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional CpgStruct.Edge.EdgeType edge_type = 5;
 * @return {!proto.cpg.CpgStruct.Edge.EdgeType}
 */
proto.cpg.AdditionalEdgeProperty.prototype.getEdgeType = function() {
  return /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.cpg.CpgStruct.Edge.EdgeType} value
 * @return {!proto.cpg.AdditionalEdgeProperty} returns this
 */
proto.cpg.AdditionalEdgeProperty.prototype.setEdgeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.CpgOverlay.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.CpgOverlay.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.CpgOverlay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.CpgOverlay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgOverlay.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeList: jspb.Message.toObjectList(msg.getNodeList(),
    proto.cpg.CpgStruct.Node.toObject, includeInstance),
    edgeList: jspb.Message.toObjectList(msg.getEdgeList(),
    proto.cpg.CpgStruct.Edge.toObject, includeInstance),
    nodePropertyList: jspb.Message.toObjectList(msg.getNodePropertyList(),
    proto.cpg.AdditionalNodeProperty.toObject, includeInstance),
    edgePropertyList: jspb.Message.toObjectList(msg.getEdgePropertyList(),
    proto.cpg.AdditionalEdgeProperty.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.CpgOverlay}
 */
proto.cpg.CpgOverlay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.CpgOverlay;
  return proto.cpg.CpgOverlay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.CpgOverlay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.CpgOverlay}
 */
proto.cpg.CpgOverlay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cpg.CpgStruct.Node;
      reader.readMessage(value,proto.cpg.CpgStruct.Node.deserializeBinaryFromReader);
      msg.addNode(value);
      break;
    case 2:
      var value = new proto.cpg.CpgStruct.Edge;
      reader.readMessage(value,proto.cpg.CpgStruct.Edge.deserializeBinaryFromReader);
      msg.addEdge(value);
      break;
    case 3:
      var value = new proto.cpg.AdditionalNodeProperty;
      reader.readMessage(value,proto.cpg.AdditionalNodeProperty.deserializeBinaryFromReader);
      msg.addNodeProperty(value);
      break;
    case 4:
      var value = new proto.cpg.AdditionalEdgeProperty;
      reader.readMessage(value,proto.cpg.AdditionalEdgeProperty.deserializeBinaryFromReader);
      msg.addEdgeProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.CpgOverlay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.CpgOverlay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.CpgOverlay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.CpgOverlay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cpg.CpgStruct.Node.serializeBinaryToWriter
    );
  }
  f = message.getEdgeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cpg.CpgStruct.Edge.serializeBinaryToWriter
    );
  }
  f = message.getNodePropertyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cpg.AdditionalNodeProperty.serializeBinaryToWriter
    );
  }
  f = message.getEdgePropertyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.cpg.AdditionalEdgeProperty.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CpgStruct.Node node = 1;
 * @return {!Array<!proto.cpg.CpgStruct.Node>}
 */
proto.cpg.CpgOverlay.prototype.getNodeList = function() {
  return /** @type{!Array<!proto.cpg.CpgStruct.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpg.CpgStruct.Node, 1));
};


/**
 * @param {!Array<!proto.cpg.CpgStruct.Node>} value
 * @return {!proto.cpg.CpgOverlay} returns this
*/
proto.cpg.CpgOverlay.prototype.setNodeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cpg.CpgStruct.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpg.CpgStruct.Node}
 */
proto.cpg.CpgOverlay.prototype.addNode = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cpg.CpgStruct.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.CpgOverlay} returns this
 */
proto.cpg.CpgOverlay.prototype.clearNodeList = function() {
  return this.setNodeList([]);
};


/**
 * repeated CpgStruct.Edge edge = 2;
 * @return {!Array<!proto.cpg.CpgStruct.Edge>}
 */
proto.cpg.CpgOverlay.prototype.getEdgeList = function() {
  return /** @type{!Array<!proto.cpg.CpgStruct.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpg.CpgStruct.Edge, 2));
};


/**
 * @param {!Array<!proto.cpg.CpgStruct.Edge>} value
 * @return {!proto.cpg.CpgOverlay} returns this
*/
proto.cpg.CpgOverlay.prototype.setEdgeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cpg.CpgStruct.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpg.CpgStruct.Edge}
 */
proto.cpg.CpgOverlay.prototype.addEdge = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cpg.CpgStruct.Edge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.CpgOverlay} returns this
 */
proto.cpg.CpgOverlay.prototype.clearEdgeList = function() {
  return this.setEdgeList([]);
};


/**
 * repeated AdditionalNodeProperty node_property = 3;
 * @return {!Array<!proto.cpg.AdditionalNodeProperty>}
 */
proto.cpg.CpgOverlay.prototype.getNodePropertyList = function() {
  return /** @type{!Array<!proto.cpg.AdditionalNodeProperty>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpg.AdditionalNodeProperty, 3));
};


/**
 * @param {!Array<!proto.cpg.AdditionalNodeProperty>} value
 * @return {!proto.cpg.CpgOverlay} returns this
*/
proto.cpg.CpgOverlay.prototype.setNodePropertyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cpg.AdditionalNodeProperty=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpg.AdditionalNodeProperty}
 */
proto.cpg.CpgOverlay.prototype.addNodeProperty = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cpg.AdditionalNodeProperty, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.CpgOverlay} returns this
 */
proto.cpg.CpgOverlay.prototype.clearNodePropertyList = function() {
  return this.setNodePropertyList([]);
};


/**
 * repeated AdditionalEdgeProperty edge_property = 4;
 * @return {!Array<!proto.cpg.AdditionalEdgeProperty>}
 */
proto.cpg.CpgOverlay.prototype.getEdgePropertyList = function() {
  return /** @type{!Array<!proto.cpg.AdditionalEdgeProperty>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpg.AdditionalEdgeProperty, 4));
};


/**
 * @param {!Array<!proto.cpg.AdditionalEdgeProperty>} value
 * @return {!proto.cpg.CpgOverlay} returns this
*/
proto.cpg.CpgOverlay.prototype.setEdgePropertyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cpg.AdditionalEdgeProperty=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpg.AdditionalEdgeProperty}
 */
proto.cpg.CpgOverlay.prototype.addEdgeProperty = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cpg.AdditionalEdgeProperty, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.CpgOverlay} returns this
 */
proto.cpg.CpgOverlay.prototype.clearEdgePropertyList = function() {
  return this.setEdgePropertyList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.DiffGraph.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.cpg.DiffGraph.Entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph}
 */
proto.cpg.DiffGraph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph;
  return proto.cpg.DiffGraph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph}
 */
proto.cpg.DiffGraph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cpg.DiffGraph.Entry;
      reader.readMessage(value,proto.cpg.DiffGraph.Entry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cpg.DiffGraph.Entry.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.RemoveNode.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.RemoveNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph.RemoveNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph.RemoveNode}
 */
proto.cpg.DiffGraph.RemoveNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph.RemoveNode;
  return proto.cpg.DiffGraph.RemoveNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph.RemoveNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph.RemoveNode}
 */
proto.cpg.DiffGraph.RemoveNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.RemoveNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph.RemoveNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 key = 1;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveNode.prototype.getKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveNode} returns this
 */
proto.cpg.DiffGraph.RemoveNode.prototype.setKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.RemoveNodeProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph.RemoveNodeProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveNodeProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, 0),
    localName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph.RemoveNodeProperty}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph.RemoveNodeProperty;
  return proto.cpg.DiffGraph.RemoveNodeProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph.RemoveNodeProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph.RemoveNodeProperty}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.cpg.NodePropertyName} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.RemoveNodeProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph.RemoveNodeProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveNodeProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLocalName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 key = 1;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.getKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveNodeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.setKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional NodePropertyName name = 2;
 * @return {!proto.cpg.NodePropertyName}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.getName = function() {
  return /** @type {!proto.cpg.NodePropertyName} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cpg.NodePropertyName} value
 * @return {!proto.cpg.DiffGraph.RemoveNodeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string local_name = 3;
 * @return {string}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.getLocalName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpg.DiffGraph.RemoveNodeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.setLocalName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.RemoveEdge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph.RemoveEdge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveEdge.toObject = function(includeInstance, msg) {
  var f, obj = {
    outNodeKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inNodeKey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    edgeType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    propertieshash: msg.getPropertieshash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph.RemoveEdge}
 */
proto.cpg.DiffGraph.RemoveEdge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph.RemoveEdge;
  return proto.cpg.DiffGraph.RemoveEdge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph.RemoveEdge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph.RemoveEdge}
 */
proto.cpg.DiffGraph.RemoveEdge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOutNodeKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInNodeKey(value);
      break;
    case 3:
      var value = /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (reader.readEnum());
      msg.setEdgeType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPropertieshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.RemoveEdge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph.RemoveEdge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveEdge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutNodeKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getInNodeKey();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEdgeType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPropertieshash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional int64 out_node_key = 1;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getOutNodeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveEdge} returns this
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.setOutNodeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 in_node_key = 2;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getInNodeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveEdge} returns this
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.setInNodeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CpgStruct.Edge.EdgeType edge_type = 3;
 * @return {!proto.cpg.CpgStruct.Edge.EdgeType}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getEdgeType = function() {
  return /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.cpg.CpgStruct.Edge.EdgeType} value
 * @return {!proto.cpg.DiffGraph.RemoveEdge} returns this
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.setEdgeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes propertiesHash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getPropertieshash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes propertiesHash = 4;
 * This is a type-conversion wrapper around `getPropertieshash()`
 * @return {string}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getPropertieshash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPropertieshash()));
};


/**
 * optional bytes propertiesHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPropertieshash()`
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getPropertieshash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPropertieshash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cpg.DiffGraph.RemoveEdge} returns this
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.setPropertieshash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.RemoveEdgeProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph.RemoveEdgeProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    outNodeKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inNodeKey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    edgeType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    propertieshash: msg.getPropertieshash_asB64(),
    propertyName: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph.RemoveEdgeProperty;
  return proto.cpg.DiffGraph.RemoveEdgeProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph.RemoveEdgeProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOutNodeKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInNodeKey(value);
      break;
    case 3:
      var value = /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (reader.readEnum());
      msg.setEdgeType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPropertieshash(value);
      break;
    case 5:
      var value = /** @type {!proto.cpg.EdgePropertyName} */ (reader.readEnum());
      msg.setPropertyName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.RemoveEdgeProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph.RemoveEdgeProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutNodeKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getInNodeKey();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEdgeType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPropertieshash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPropertyName();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int64 out_node_key = 1;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getOutNodeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.setOutNodeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 in_node_key = 2;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getInNodeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.setInNodeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CpgStruct.Edge.EdgeType edge_type = 3;
 * @return {!proto.cpg.CpgStruct.Edge.EdgeType}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getEdgeType = function() {
  return /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.cpg.CpgStruct.Edge.EdgeType} value
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.setEdgeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes propertiesHash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getPropertieshash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes propertiesHash = 4;
 * This is a type-conversion wrapper around `getPropertieshash()`
 * @return {string}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getPropertieshash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPropertieshash()));
};


/**
 * optional bytes propertiesHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPropertieshash()`
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getPropertieshash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPropertieshash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.setPropertieshash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional EdgePropertyName property_name = 5;
 * @return {!proto.cpg.EdgePropertyName}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getPropertyName = function() {
  return /** @type {!proto.cpg.EdgePropertyName} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.cpg.EdgePropertyName} value
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.setPropertyName = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cpg.DiffGraph.Entry.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.cpg.DiffGraph.Entry.ValueCase = {
  VALUE_NOT_SET: 0,
  NODE: 1,
  EDGE: 2,
  NODE_PROPERTY: 3,
  EDGE_PROPERTY: 4,
  REMOVE_NODE: 5,
  REMOVE_NODE_PROPERTY: 6,
  REMOVE_EDGE: 7,
  REMOVE_EDGE_PROPERTY: 8
};

/**
 * @return {proto.cpg.DiffGraph.Entry.ValueCase}
 */
proto.cpg.DiffGraph.Entry.prototype.getValueCase = function() {
  return /** @type {proto.cpg.DiffGraph.Entry.ValueCase} */(jspb.Message.computeOneofCase(this, proto.cpg.DiffGraph.Entry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.Entry.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.Entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph.Entry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.Entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.cpg.CpgStruct.Node.toObject(includeInstance, f),
    edge: (f = msg.getEdge()) && proto.cpg.CpgStruct.Edge.toObject(includeInstance, f),
    nodeProperty: (f = msg.getNodeProperty()) && proto.cpg.AdditionalNodeProperty.toObject(includeInstance, f),
    edgeProperty: (f = msg.getEdgeProperty()) && proto.cpg.AdditionalEdgeProperty.toObject(includeInstance, f),
    removeNode: (f = msg.getRemoveNode()) && proto.cpg.DiffGraph.RemoveNode.toObject(includeInstance, f),
    removeNodeProperty: (f = msg.getRemoveNodeProperty()) && proto.cpg.DiffGraph.RemoveNodeProperty.toObject(includeInstance, f),
    removeEdge: (f = msg.getRemoveEdge()) && proto.cpg.DiffGraph.RemoveEdge.toObject(includeInstance, f),
    removeEdgeProperty: (f = msg.getRemoveEdgeProperty()) && proto.cpg.DiffGraph.RemoveEdgeProperty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph.Entry}
 */
proto.cpg.DiffGraph.Entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph.Entry;
  return proto.cpg.DiffGraph.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph.Entry}
 */
proto.cpg.DiffGraph.Entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cpg.CpgStruct.Node;
      reader.readMessage(value,proto.cpg.CpgStruct.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = new proto.cpg.CpgStruct.Edge;
      reader.readMessage(value,proto.cpg.CpgStruct.Edge.deserializeBinaryFromReader);
      msg.setEdge(value);
      break;
    case 3:
      var value = new proto.cpg.AdditionalNodeProperty;
      reader.readMessage(value,proto.cpg.AdditionalNodeProperty.deserializeBinaryFromReader);
      msg.setNodeProperty(value);
      break;
    case 4:
      var value = new proto.cpg.AdditionalEdgeProperty;
      reader.readMessage(value,proto.cpg.AdditionalEdgeProperty.deserializeBinaryFromReader);
      msg.setEdgeProperty(value);
      break;
    case 5:
      var value = new proto.cpg.DiffGraph.RemoveNode;
      reader.readMessage(value,proto.cpg.DiffGraph.RemoveNode.deserializeBinaryFromReader);
      msg.setRemoveNode(value);
      break;
    case 6:
      var value = new proto.cpg.DiffGraph.RemoveNodeProperty;
      reader.readMessage(value,proto.cpg.DiffGraph.RemoveNodeProperty.deserializeBinaryFromReader);
      msg.setRemoveNodeProperty(value);
      break;
    case 7:
      var value = new proto.cpg.DiffGraph.RemoveEdge;
      reader.readMessage(value,proto.cpg.DiffGraph.RemoveEdge.deserializeBinaryFromReader);
      msg.setRemoveEdge(value);
      break;
    case 8:
      var value = new proto.cpg.DiffGraph.RemoveEdgeProperty;
      reader.readMessage(value,proto.cpg.DiffGraph.RemoveEdgeProperty.deserializeBinaryFromReader);
      msg.setRemoveEdgeProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.Entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.Entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.Entry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cpg.CpgStruct.Node.serializeBinaryToWriter
    );
  }
  f = message.getEdge();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cpg.CpgStruct.Edge.serializeBinaryToWriter
    );
  }
  f = message.getNodeProperty();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cpg.AdditionalNodeProperty.serializeBinaryToWriter
    );
  }
  f = message.getEdgeProperty();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cpg.AdditionalEdgeProperty.serializeBinaryToWriter
    );
  }
  f = message.getRemoveNode();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cpg.DiffGraph.RemoveNode.serializeBinaryToWriter
    );
  }
  f = message.getRemoveNodeProperty();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cpg.DiffGraph.RemoveNodeProperty.serializeBinaryToWriter
    );
  }
  f = message.getRemoveEdge();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.cpg.DiffGraph.RemoveEdge.serializeBinaryToWriter
    );
  }
  f = message.getRemoveEdgeProperty();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.cpg.DiffGraph.RemoveEdgeProperty.serializeBinaryToWriter
    );
  }
};


/**
 * optional CpgStruct.Node node = 1;
 * @return {?proto.cpg.CpgStruct.Node}
 */
proto.cpg.DiffGraph.Entry.prototype.getNode = function() {
  return /** @type{?proto.cpg.CpgStruct.Node} */ (
    jspb.Message.getWrapperField(this, proto.cpg.CpgStruct.Node, 1));
};


/**
 * @param {?proto.cpg.CpgStruct.Node|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CpgStruct.Edge edge = 2;
 * @return {?proto.cpg.CpgStruct.Edge}
 */
proto.cpg.DiffGraph.Entry.prototype.getEdge = function() {
  return /** @type{?proto.cpg.CpgStruct.Edge} */ (
    jspb.Message.getWrapperField(this, proto.cpg.CpgStruct.Edge, 2));
};


/**
 * @param {?proto.cpg.CpgStruct.Edge|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setEdge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearEdge = function() {
  return this.setEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasEdge = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AdditionalNodeProperty node_property = 3;
 * @return {?proto.cpg.AdditionalNodeProperty}
 */
proto.cpg.DiffGraph.Entry.prototype.getNodeProperty = function() {
  return /** @type{?proto.cpg.AdditionalNodeProperty} */ (
    jspb.Message.getWrapperField(this, proto.cpg.AdditionalNodeProperty, 3));
};


/**
 * @param {?proto.cpg.AdditionalNodeProperty|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setNodeProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearNodeProperty = function() {
  return this.setNodeProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasNodeProperty = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AdditionalEdgeProperty edge_property = 4;
 * @return {?proto.cpg.AdditionalEdgeProperty}
 */
proto.cpg.DiffGraph.Entry.prototype.getEdgeProperty = function() {
  return /** @type{?proto.cpg.AdditionalEdgeProperty} */ (
    jspb.Message.getWrapperField(this, proto.cpg.AdditionalEdgeProperty, 4));
};


/**
 * @param {?proto.cpg.AdditionalEdgeProperty|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setEdgeProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearEdgeProperty = function() {
  return this.setEdgeProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasEdgeProperty = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RemoveNode remove_node = 5;
 * @return {?proto.cpg.DiffGraph.RemoveNode}
 */
proto.cpg.DiffGraph.Entry.prototype.getRemoveNode = function() {
  return /** @type{?proto.cpg.DiffGraph.RemoveNode} */ (
    jspb.Message.getWrapperField(this, proto.cpg.DiffGraph.RemoveNode, 5));
};


/**
 * @param {?proto.cpg.DiffGraph.RemoveNode|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setRemoveNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearRemoveNode = function() {
  return this.setRemoveNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasRemoveNode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RemoveNodeProperty remove_node_property = 6;
 * @return {?proto.cpg.DiffGraph.RemoveNodeProperty}
 */
proto.cpg.DiffGraph.Entry.prototype.getRemoveNodeProperty = function() {
  return /** @type{?proto.cpg.DiffGraph.RemoveNodeProperty} */ (
    jspb.Message.getWrapperField(this, proto.cpg.DiffGraph.RemoveNodeProperty, 6));
};


/**
 * @param {?proto.cpg.DiffGraph.RemoveNodeProperty|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setRemoveNodeProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearRemoveNodeProperty = function() {
  return this.setRemoveNodeProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasRemoveNodeProperty = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RemoveEdge remove_edge = 7;
 * @return {?proto.cpg.DiffGraph.RemoveEdge}
 */
proto.cpg.DiffGraph.Entry.prototype.getRemoveEdge = function() {
  return /** @type{?proto.cpg.DiffGraph.RemoveEdge} */ (
    jspb.Message.getWrapperField(this, proto.cpg.DiffGraph.RemoveEdge, 7));
};


/**
 * @param {?proto.cpg.DiffGraph.RemoveEdge|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setRemoveEdge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearRemoveEdge = function() {
  return this.setRemoveEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasRemoveEdge = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RemoveEdgeProperty remove_edge_property = 8;
 * @return {?proto.cpg.DiffGraph.RemoveEdgeProperty}
 */
proto.cpg.DiffGraph.Entry.prototype.getRemoveEdgeProperty = function() {
  return /** @type{?proto.cpg.DiffGraph.RemoveEdgeProperty} */ (
    jspb.Message.getWrapperField(this, proto.cpg.DiffGraph.RemoveEdgeProperty, 8));
};


/**
 * @param {?proto.cpg.DiffGraph.RemoveEdgeProperty|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setRemoveEdgeProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearRemoveEdgeProperty = function() {
  return this.setRemoveEdgeProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasRemoveEdgeProperty = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated Entry entries = 1;
 * @return {!Array<!proto.cpg.DiffGraph.Entry>}
 */
proto.cpg.DiffGraph.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.cpg.DiffGraph.Entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpg.DiffGraph.Entry, 1));
};


/**
 * @param {!Array<!proto.cpg.DiffGraph.Entry>} value
 * @return {!proto.cpg.DiffGraph} returns this
*/
proto.cpg.DiffGraph.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cpg.DiffGraph.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpg.DiffGraph.Entry}
 */
proto.cpg.DiffGraph.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cpg.DiffGraph.Entry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.DiffGraph} returns this
 */
proto.cpg.DiffGraph.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};


/**
 * @enum {number}
 */
proto.cpg.NodePropertyName = {
  UNKNOWN_NODE_PROPERTY: 0,
  LINE_NUMBER: 2,
  PARSER_TYPE_NAME: 3,
  ORDER: 4,
  NAME: 5,
  FULL_NAME: 6,
  IS_EXTERNAL: 7,
  VALUE: 8,
  COLUMN_NUMBER: 11,
  LINE_NUMBER_END: 12,
  VERSION: 13,
  BINARY_SIGNATURE: 14,
  EVALUATION_STRATEGY: 15,
  COLUMN_NUMBER_END: 16,
  DEPTH_FIRST_ORDER: 17,
  LANGUAGE: 19,
  CONTENT: 20,
  CODE: 21,
  SIGNATURE: 22,
  HAS_MAPPING: 23,
  RESOLVED: 24,
  DISPATCH_TYPE: 25,
  MODIFIER_TYPE: 26,
  CONTROL_STRUCTURE_TYPE: 27,
  ARGUMENT_INDEX: 40,
  CLOSURE_BINDING_ID: 50,
  TYPE_FULL_NAME: 51,
  TYPE_DECL_FULL_NAME: 52,
  INHERITS_FROM_TYPE_FULL_NAME: 53,
  METHOD_FULL_NAME: 54,
  METHOD_INST_FULL_NAME: 55,
  AST_PARENT_TYPE: 56,
  AST_PARENT_FULL_NAME: 57,
  DEPENDENCY_GROUP_ID: 58,
  INTERNAL_FLAGS: 78,
  SYMBOL: 100,
  METHOD_SHORT_NAME: 102,
  PACKAGE_NAME: 103,
  CLASS_NAME: 104,
  NODE_LABEL: 105,
  FILENAME: 106,
  ANNOTATION_NAME: 107,
  ANNOTATION_FULL_NAME: 108,
  IS_STATIC: 110,
  VAR_TYPE: 111,
  EVALUATION_TYPE: 112,
  PARAMETER_INDEX: 113,
  FINGERPRINT: 114,
  SOURCE_TYPE: 115,
  SINK_TYPE: 116,
  CATEGORY: 117,
  OVERLAYS: 118,
  POLICY_DIRECTORIES: 119,
  HASH: 120,
  PATH: 121,
  SPID: 122,
  LITERALS_TO_SINK: 123,
  ARGUMENT_NAME: 130,
  KEY: 131,
  CLASS_SHORT_NAME: 132,
  ALIAS_TYPE_FULL_NAME: 158,
  CLOSURE_ORIGINAL_NAME: 159,
  IS_VARIADIC: 221,
  VARARG_PARAMETER: 222,
  PATTERN: 813,
  CATEGORIES: 814,
  EVAL_TYPE: 815,
  IS_METHOD_NEVER_OVERRIDDEN: 1002,
  DYNAMIC_TYPE_HINT_FULL_NAME: 1591,
  STRUCTURED_FINGERPRINT: 1714,
  USED_IN: 22919,
  CANONICAL_NAME: 2001092,
  CONTAINED_REF: 2007161
};

/**
 * @enum {number}
 */
proto.cpg.EdgePropertyName = {
  UNKNOWN_EDGE_PROPERTY: 0,
  LOCAL_NAME: 6,
  INDEX: 8,
  VARIABLE: 11
};

/**
 * @enum {number}
 */
proto.cpg.ModifierTypes = {
  UNKNOWN_MODIFIER_TYPE: 0,
  STATIC: 1,
  PUBLIC: 2,
  PROTECTED: 3,
  PRIVATE: 4,
  ABSTRACT: 5,
  NATIVE: 6,
  CONSTRUCTOR: 7,
  VIRTUAL: 8,
  INTERNAL: 9
};

/**
 * @enum {number}
 */
proto.cpg.LANGUAGES = {
  UNKNOWN_LANGUAGE: 0,
  JAVA: 1,
  JAVASCRIPT: 2,
  GOLANG: 3,
  CSHARP: 4,
  C: 5,
  PYTHON: 6,
  LLVM: 7,
  PHP: 8,
  FUZZY_TEST_LANG: 9,
  GHIDRA: 10,
  KOTLIN: 11,
  NEWC: 12,
  JAVASRC: 13
};

/**
 * @enum {number}
 */
proto.cpg.EvaluationStrategies = {
  UNKNOWN_EVALUATION_STRATEGY: 0,
  BY_REFERENCE: 1,
  BY_SHARING: 2,
  BY_VALUE: 3
};

/**
 * @enum {number}
 */
proto.cpg.DispatchTypes = {
  UNKNOWN_DISPATCH_TYPE: 0,
  STATIC_DISPATCH: 1,
  DYNAMIC_DISPATCH: 2,
  INLINED: 3
};

/**
 * @enum {number}
 */
proto.cpg.FRAMEWORKS = {
  UNKNOWN_FRAMEWORK: 0,
  PLAY: 1,
  GWT: 2,
  SPRING: 3,
  VERTX: 4,
  JSF: 5,
  SERVLET: 6,
  JAXRS: 7,
  SPARK: 8,
  ASP_NET_CORE: 9,
  ASP_NET_WEB_API: 10,
  ASP_NET_MVC: 11,
  JAXWS: 12,
  ASP_NET_WEB_UI: 13,
  JAVA_INTERNAL: 14,
  DROPWIZARD: 15,
  WCF: 16
};

/**
 * @enum {number}
 */
proto.cpg.CONTROL_STRUCTURE_TYPES = {
  UNKNOWN_CONTROL_STRUCTURE_TYPE: 0,
  BREAK: 1,
  CONTINUE: 2,
  WHILE: 3,
  DO: 4,
  FOR: 5,
  GOTO: 6,
  IF: 7,
  ELSE: 8,
  SWITCH: 9,
  TRY: 10,
  THROW: 11
};

goog.object.extend(exports, proto.cpg);
