// source: cpg.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.cpg.DiffGraph');
goog.provide('proto.cpg.DiffGraph.Entry');
goog.provide('proto.cpg.DiffGraph.Entry.ValueCase');
goog.provide('proto.cpg.DiffGraph.RemoveEdge');
goog.provide('proto.cpg.DiffGraph.RemoveEdgeProperty');
goog.provide('proto.cpg.DiffGraph.RemoveNode');
goog.provide('proto.cpg.DiffGraph.RemoveNodeProperty');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.cpg.AdditionalEdgeProperty');
goog.require('proto.cpg.AdditionalNodeProperty');
goog.require('proto.cpg.CpgStruct.Edge');
goog.require('proto.cpg.CpgStruct.Node');

goog.forwardDeclare('proto.cpg.CpgStruct.Edge.EdgeType');
goog.forwardDeclare('proto.cpg.EdgePropertyName');
goog.forwardDeclare('proto.cpg.NodePropertyName');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpg.DiffGraph.repeatedFields_, null);
};
goog.inherits(proto.cpg.DiffGraph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.displayName = 'proto.cpg.DiffGraph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph.RemoveNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.DiffGraph.RemoveNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.RemoveNode.displayName = 'proto.cpg.DiffGraph.RemoveNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph.RemoveNodeProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.DiffGraph.RemoveNodeProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.RemoveNodeProperty.displayName = 'proto.cpg.DiffGraph.RemoveNodeProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph.RemoveEdge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.DiffGraph.RemoveEdge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.RemoveEdge.displayName = 'proto.cpg.DiffGraph.RemoveEdge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph.RemoveEdgeProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpg.DiffGraph.RemoveEdgeProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.RemoveEdgeProperty.displayName = 'proto.cpg.DiffGraph.RemoveEdgeProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpg.DiffGraph.Entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cpg.DiffGraph.Entry.oneofGroups_);
};
goog.inherits(proto.cpg.DiffGraph.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpg.DiffGraph.Entry.displayName = 'proto.cpg.DiffGraph.Entry';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpg.DiffGraph.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.cpg.DiffGraph.Entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph}
 */
proto.cpg.DiffGraph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph;
  return proto.cpg.DiffGraph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph}
 */
proto.cpg.DiffGraph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cpg.DiffGraph.Entry;
      reader.readMessage(value,proto.cpg.DiffGraph.Entry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cpg.DiffGraph.Entry.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.RemoveNode.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.RemoveNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph.RemoveNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph.RemoveNode}
 */
proto.cpg.DiffGraph.RemoveNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph.RemoveNode;
  return proto.cpg.DiffGraph.RemoveNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph.RemoveNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph.RemoveNode}
 */
proto.cpg.DiffGraph.RemoveNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.RemoveNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph.RemoveNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 key = 1;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveNode.prototype.getKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveNode} returns this
 */
proto.cpg.DiffGraph.RemoveNode.prototype.setKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.RemoveNodeProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph.RemoveNodeProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveNodeProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, 0),
    localName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph.RemoveNodeProperty}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph.RemoveNodeProperty;
  return proto.cpg.DiffGraph.RemoveNodeProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph.RemoveNodeProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph.RemoveNodeProperty}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.cpg.NodePropertyName} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.RemoveNodeProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph.RemoveNodeProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveNodeProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLocalName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 key = 1;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.getKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveNodeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.setKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional NodePropertyName name = 2;
 * @return {!proto.cpg.NodePropertyName}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.getName = function() {
  return /** @type {!proto.cpg.NodePropertyName} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cpg.NodePropertyName} value
 * @return {!proto.cpg.DiffGraph.RemoveNodeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string local_name = 3;
 * @return {string}
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.getLocalName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpg.DiffGraph.RemoveNodeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveNodeProperty.prototype.setLocalName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.RemoveEdge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph.RemoveEdge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveEdge.toObject = function(includeInstance, msg) {
  var f, obj = {
    outNodeKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inNodeKey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    edgeType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    propertieshash: msg.getPropertieshash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph.RemoveEdge}
 */
proto.cpg.DiffGraph.RemoveEdge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph.RemoveEdge;
  return proto.cpg.DiffGraph.RemoveEdge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph.RemoveEdge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph.RemoveEdge}
 */
proto.cpg.DiffGraph.RemoveEdge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOutNodeKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInNodeKey(value);
      break;
    case 3:
      var value = /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (reader.readEnum());
      msg.setEdgeType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPropertieshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.RemoveEdge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph.RemoveEdge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveEdge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutNodeKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getInNodeKey();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEdgeType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPropertieshash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional int64 out_node_key = 1;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getOutNodeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveEdge} returns this
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.setOutNodeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 in_node_key = 2;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getInNodeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveEdge} returns this
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.setInNodeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CpgStruct.Edge.EdgeType edge_type = 3;
 * @return {!proto.cpg.CpgStruct.Edge.EdgeType}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getEdgeType = function() {
  return /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.cpg.CpgStruct.Edge.EdgeType} value
 * @return {!proto.cpg.DiffGraph.RemoveEdge} returns this
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.setEdgeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes propertiesHash = 4;
 * @return {string}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getPropertieshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes propertiesHash = 4;
 * This is a type-conversion wrapper around `getPropertieshash()`
 * @return {string}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getPropertieshash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPropertieshash()));
};


/**
 * optional bytes propertiesHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPropertieshash()`
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.getPropertieshash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPropertieshash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cpg.DiffGraph.RemoveEdge} returns this
 */
proto.cpg.DiffGraph.RemoveEdge.prototype.setPropertieshash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.RemoveEdgeProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph.RemoveEdgeProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    outNodeKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inNodeKey: jspb.Message.getFieldWithDefault(msg, 2, 0),
    edgeType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    propertieshash: msg.getPropertieshash_asB64(),
    propertyName: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph.RemoveEdgeProperty;
  return proto.cpg.DiffGraph.RemoveEdgeProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph.RemoveEdgeProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOutNodeKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInNodeKey(value);
      break;
    case 3:
      var value = /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (reader.readEnum());
      msg.setEdgeType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPropertieshash(value);
      break;
    case 5:
      var value = /** @type {!proto.cpg.EdgePropertyName} */ (reader.readEnum());
      msg.setPropertyName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.RemoveEdgeProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph.RemoveEdgeProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutNodeKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getInNodeKey();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEdgeType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPropertieshash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPropertyName();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int64 out_node_key = 1;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getOutNodeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.setOutNodeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 in_node_key = 2;
 * @return {number}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getInNodeKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.setInNodeKey = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CpgStruct.Edge.EdgeType edge_type = 3;
 * @return {!proto.cpg.CpgStruct.Edge.EdgeType}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getEdgeType = function() {
  return /** @type {!proto.cpg.CpgStruct.Edge.EdgeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.cpg.CpgStruct.Edge.EdgeType} value
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.setEdgeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes propertiesHash = 4;
 * @return {string}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getPropertieshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes propertiesHash = 4;
 * This is a type-conversion wrapper around `getPropertieshash()`
 * @return {string}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getPropertieshash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPropertieshash()));
};


/**
 * optional bytes propertiesHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPropertieshash()`
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getPropertieshash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPropertieshash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.setPropertieshash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional EdgePropertyName property_name = 5;
 * @return {!proto.cpg.EdgePropertyName}
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.getPropertyName = function() {
  return /** @type {!proto.cpg.EdgePropertyName} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.cpg.EdgePropertyName} value
 * @return {!proto.cpg.DiffGraph.RemoveEdgeProperty} returns this
 */
proto.cpg.DiffGraph.RemoveEdgeProperty.prototype.setPropertyName = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cpg.DiffGraph.Entry.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.cpg.DiffGraph.Entry.ValueCase = {
  VALUE_NOT_SET: 0,
  NODE: 1,
  EDGE: 2,
  NODE_PROPERTY: 3,
  EDGE_PROPERTY: 4,
  REMOVE_NODE: 5,
  REMOVE_NODE_PROPERTY: 6,
  REMOVE_EDGE: 7,
  REMOVE_EDGE_PROPERTY: 8
};

/**
 * @return {proto.cpg.DiffGraph.Entry.ValueCase}
 */
proto.cpg.DiffGraph.Entry.prototype.getValueCase = function() {
  return /** @type {proto.cpg.DiffGraph.Entry.ValueCase} */(jspb.Message.computeOneofCase(this, proto.cpg.DiffGraph.Entry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpg.DiffGraph.Entry.prototype.toObject = function(opt_includeInstance) {
  return proto.cpg.DiffGraph.Entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpg.DiffGraph.Entry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.Entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.cpg.CpgStruct.Node.toObject(includeInstance, f),
    edge: (f = msg.getEdge()) && proto.cpg.CpgStruct.Edge.toObject(includeInstance, f),
    nodeProperty: (f = msg.getNodeProperty()) && proto.cpg.AdditionalNodeProperty.toObject(includeInstance, f),
    edgeProperty: (f = msg.getEdgeProperty()) && proto.cpg.AdditionalEdgeProperty.toObject(includeInstance, f),
    removeNode: (f = msg.getRemoveNode()) && proto.cpg.DiffGraph.RemoveNode.toObject(includeInstance, f),
    removeNodeProperty: (f = msg.getRemoveNodeProperty()) && proto.cpg.DiffGraph.RemoveNodeProperty.toObject(includeInstance, f),
    removeEdge: (f = msg.getRemoveEdge()) && proto.cpg.DiffGraph.RemoveEdge.toObject(includeInstance, f),
    removeEdgeProperty: (f = msg.getRemoveEdgeProperty()) && proto.cpg.DiffGraph.RemoveEdgeProperty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpg.DiffGraph.Entry}
 */
proto.cpg.DiffGraph.Entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpg.DiffGraph.Entry;
  return proto.cpg.DiffGraph.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpg.DiffGraph.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpg.DiffGraph.Entry}
 */
proto.cpg.DiffGraph.Entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cpg.CpgStruct.Node;
      reader.readMessage(value,proto.cpg.CpgStruct.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = new proto.cpg.CpgStruct.Edge;
      reader.readMessage(value,proto.cpg.CpgStruct.Edge.deserializeBinaryFromReader);
      msg.setEdge(value);
      break;
    case 3:
      var value = new proto.cpg.AdditionalNodeProperty;
      reader.readMessage(value,proto.cpg.AdditionalNodeProperty.deserializeBinaryFromReader);
      msg.setNodeProperty(value);
      break;
    case 4:
      var value = new proto.cpg.AdditionalEdgeProperty;
      reader.readMessage(value,proto.cpg.AdditionalEdgeProperty.deserializeBinaryFromReader);
      msg.setEdgeProperty(value);
      break;
    case 5:
      var value = new proto.cpg.DiffGraph.RemoveNode;
      reader.readMessage(value,proto.cpg.DiffGraph.RemoveNode.deserializeBinaryFromReader);
      msg.setRemoveNode(value);
      break;
    case 6:
      var value = new proto.cpg.DiffGraph.RemoveNodeProperty;
      reader.readMessage(value,proto.cpg.DiffGraph.RemoveNodeProperty.deserializeBinaryFromReader);
      msg.setRemoveNodeProperty(value);
      break;
    case 7:
      var value = new proto.cpg.DiffGraph.RemoveEdge;
      reader.readMessage(value,proto.cpg.DiffGraph.RemoveEdge.deserializeBinaryFromReader);
      msg.setRemoveEdge(value);
      break;
    case 8:
      var value = new proto.cpg.DiffGraph.RemoveEdgeProperty;
      reader.readMessage(value,proto.cpg.DiffGraph.RemoveEdgeProperty.deserializeBinaryFromReader);
      msg.setRemoveEdgeProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpg.DiffGraph.Entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpg.DiffGraph.Entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpg.DiffGraph.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpg.DiffGraph.Entry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cpg.CpgStruct.Node.serializeBinaryToWriter
    );
  }
  f = message.getEdge();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cpg.CpgStruct.Edge.serializeBinaryToWriter
    );
  }
  f = message.getNodeProperty();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cpg.AdditionalNodeProperty.serializeBinaryToWriter
    );
  }
  f = message.getEdgeProperty();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cpg.AdditionalEdgeProperty.serializeBinaryToWriter
    );
  }
  f = message.getRemoveNode();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cpg.DiffGraph.RemoveNode.serializeBinaryToWriter
    );
  }
  f = message.getRemoveNodeProperty();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cpg.DiffGraph.RemoveNodeProperty.serializeBinaryToWriter
    );
  }
  f = message.getRemoveEdge();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.cpg.DiffGraph.RemoveEdge.serializeBinaryToWriter
    );
  }
  f = message.getRemoveEdgeProperty();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.cpg.DiffGraph.RemoveEdgeProperty.serializeBinaryToWriter
    );
  }
};


/**
 * optional CpgStruct.Node node = 1;
 * @return {?proto.cpg.CpgStruct.Node}
 */
proto.cpg.DiffGraph.Entry.prototype.getNode = function() {
  return /** @type{?proto.cpg.CpgStruct.Node} */ (
    jspb.Message.getWrapperField(this, proto.cpg.CpgStruct.Node, 1));
};


/**
 * @param {?proto.cpg.CpgStruct.Node|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CpgStruct.Edge edge = 2;
 * @return {?proto.cpg.CpgStruct.Edge}
 */
proto.cpg.DiffGraph.Entry.prototype.getEdge = function() {
  return /** @type{?proto.cpg.CpgStruct.Edge} */ (
    jspb.Message.getWrapperField(this, proto.cpg.CpgStruct.Edge, 2));
};


/**
 * @param {?proto.cpg.CpgStruct.Edge|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setEdge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearEdge = function() {
  return this.setEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasEdge = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AdditionalNodeProperty node_property = 3;
 * @return {?proto.cpg.AdditionalNodeProperty}
 */
proto.cpg.DiffGraph.Entry.prototype.getNodeProperty = function() {
  return /** @type{?proto.cpg.AdditionalNodeProperty} */ (
    jspb.Message.getWrapperField(this, proto.cpg.AdditionalNodeProperty, 3));
};


/**
 * @param {?proto.cpg.AdditionalNodeProperty|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setNodeProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearNodeProperty = function() {
  return this.setNodeProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasNodeProperty = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AdditionalEdgeProperty edge_property = 4;
 * @return {?proto.cpg.AdditionalEdgeProperty}
 */
proto.cpg.DiffGraph.Entry.prototype.getEdgeProperty = function() {
  return /** @type{?proto.cpg.AdditionalEdgeProperty} */ (
    jspb.Message.getWrapperField(this, proto.cpg.AdditionalEdgeProperty, 4));
};


/**
 * @param {?proto.cpg.AdditionalEdgeProperty|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setEdgeProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearEdgeProperty = function() {
  return this.setEdgeProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasEdgeProperty = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RemoveNode remove_node = 5;
 * @return {?proto.cpg.DiffGraph.RemoveNode}
 */
proto.cpg.DiffGraph.Entry.prototype.getRemoveNode = function() {
  return /** @type{?proto.cpg.DiffGraph.RemoveNode} */ (
    jspb.Message.getWrapperField(this, proto.cpg.DiffGraph.RemoveNode, 5));
};


/**
 * @param {?proto.cpg.DiffGraph.RemoveNode|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setRemoveNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearRemoveNode = function() {
  return this.setRemoveNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasRemoveNode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RemoveNodeProperty remove_node_property = 6;
 * @return {?proto.cpg.DiffGraph.RemoveNodeProperty}
 */
proto.cpg.DiffGraph.Entry.prototype.getRemoveNodeProperty = function() {
  return /** @type{?proto.cpg.DiffGraph.RemoveNodeProperty} */ (
    jspb.Message.getWrapperField(this, proto.cpg.DiffGraph.RemoveNodeProperty, 6));
};


/**
 * @param {?proto.cpg.DiffGraph.RemoveNodeProperty|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setRemoveNodeProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearRemoveNodeProperty = function() {
  return this.setRemoveNodeProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasRemoveNodeProperty = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RemoveEdge remove_edge = 7;
 * @return {?proto.cpg.DiffGraph.RemoveEdge}
 */
proto.cpg.DiffGraph.Entry.prototype.getRemoveEdge = function() {
  return /** @type{?proto.cpg.DiffGraph.RemoveEdge} */ (
    jspb.Message.getWrapperField(this, proto.cpg.DiffGraph.RemoveEdge, 7));
};


/**
 * @param {?proto.cpg.DiffGraph.RemoveEdge|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setRemoveEdge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearRemoveEdge = function() {
  return this.setRemoveEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasRemoveEdge = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RemoveEdgeProperty remove_edge_property = 8;
 * @return {?proto.cpg.DiffGraph.RemoveEdgeProperty}
 */
proto.cpg.DiffGraph.Entry.prototype.getRemoveEdgeProperty = function() {
  return /** @type{?proto.cpg.DiffGraph.RemoveEdgeProperty} */ (
    jspb.Message.getWrapperField(this, proto.cpg.DiffGraph.RemoveEdgeProperty, 8));
};


/**
 * @param {?proto.cpg.DiffGraph.RemoveEdgeProperty|undefined} value
 * @return {!proto.cpg.DiffGraph.Entry} returns this
*/
proto.cpg.DiffGraph.Entry.prototype.setRemoveEdgeProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.cpg.DiffGraph.Entry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpg.DiffGraph.Entry} returns this
 */
proto.cpg.DiffGraph.Entry.prototype.clearRemoveEdgeProperty = function() {
  return this.setRemoveEdgeProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpg.DiffGraph.Entry.prototype.hasRemoveEdgeProperty = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated Entry entries = 1;
 * @return {!Array<!proto.cpg.DiffGraph.Entry>}
 */
proto.cpg.DiffGraph.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.cpg.DiffGraph.Entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cpg.DiffGraph.Entry, 1));
};


/**
 * @param {!Array<!proto.cpg.DiffGraph.Entry>} value
 * @return {!proto.cpg.DiffGraph} returns this
*/
proto.cpg.DiffGraph.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cpg.DiffGraph.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cpg.DiffGraph.Entry}
 */
proto.cpg.DiffGraph.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cpg.DiffGraph.Entry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpg.DiffGraph} returns this
 */
proto.cpg.DiffGraph.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};


